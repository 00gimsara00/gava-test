package net.tcodes.team24clan;

import android.content.*;
import android.content.pm.*;
import android.graphics.*;
import android.net.*;
import android.os.*;
import android.support.annotation.*;
import android.support.design.widget.*;
import android.support.v4.widget.*;
import android.support.v7.app.*;
import android.text.*;
import android.view.*;
import android.widget.*;
import com.gn.tunnel.*;
import com.google.android.gms.ads.*;
import com.google.android.gms.ads.reward.*;
import java.util.*;
import net.tcodes.team24clan.core.*;
import net.tcodes.team24clan.db.*;
import net.tcodes.team24clan.fragment.*;
import net.tcodes.team24clan.logger.*;
import net.tcodes.team24clan.model.*;
import net.tcodes.team24clan.util.*;
import net.tcodes.team24clan.view.*;
import org.bitvise.*;
import org.json.*;

import com.gn.tunnel.R;
import android.webkit.*;

public class MainActivity extends MainBase implements SSHTunnelService.StatusChangeListener
{

    private CenteredToolBar toolbar;

    private Button btnAcc;

	private AdmobHelper adhelper;

	private TorrentDetection torrent;

	private TextView ipAddress;

	private ImageView v;

	private WebView webView;

    @Override
    public void onStatusChanged(int status)
    {
        switch (status)
        {
            case 0:
				// snack("Conectando...");
                break;
            case 1:
                //snack("Falha na autenticação!");
                break;
            case 2:
                rippleBackground.stopRippleAnimation();
                rippleBackground.setRippleColor(Color.parseColor(getString(R.color.colorDisconnected)));
                rippleBackground.startRippleAnimation();
                //snack("Desconectado");
				torrent.stop();
				ipAddress.setText(Util.getIpAddress());
				
				adhelper.loadBannerAdsRequest();
				adhelper.loadIntertitial();
                break;
            case 3:
                rippleBackground.stopRippleAnimation();
                rippleBackground.setRippleColor(Color.parseColor(getString(R.color.colorConnected)));
                rippleBackground.startRippleAnimation();
                torrent.start();
				//snack("Conectado");
				ipAddress.setText(Util.getIpAddress());
				
				adhelper.loadBannerAdsRequest();
				adhelper.loadRewardedAds();
                break;
        }

    }

    @Override
    public void onLogReceived(String logString)
    {
		// hotdog
    }

	private CuboidButton start_vpn;
	private Constants conts;
	private static final int REQUEST_CODE = 0;
    private DrawerLayout drawerLayout;
    public ArrayList<String> serverList = new ArrayList();
    public ArrayList<String> tweakList = new ArrayList();
    private Spinner mServer;
    private ArrayAdapter serverAdapt;
    private DataBaseHelper db;
    private SharedPreferences sp;
    private Spinner mTweak;
    private ArrayAdapter tweakAdapt;
    private CoordinatorLayout coordinatorLayout;
    private TextView vpn_status;
    private RippleBackground rippleBackground;

	@Override
	protected void onCreate(Bundle savedInstanceState)
	{
		// TODO: Implement this method
		super.onCreate(savedInstanceState);
		Thread.setDefaultUncaughtExceptionHandler(new ExceptionHandler(this));
        VPNLog.clearLog();
		doBind();
		SSHTunnelService.addOnStatusChangedListener(this);
        conts = new Constants(this);
        db = new DataBaseHelper(this);
        sp = TcodesApplication.getSharedPreferences();
		if (new Boolean(sp.getBoolean("firstStart", true)).booleanValue())
        {
            try
            {
                db.insertData(Constraints.defconf);
                final JSONObject obj = new JSONObject(db.getData());
                conts.setConfigVersion(obj.getString("Version"));
                sp.edit().putBoolean("firstStart", false).commit();
            }
            catch (Exception e)
            {

            }
		}
        setContentView(R.layout.activity_main);
        torrent = new TorrentDetection(this, Constraints.torrentList, new TorrentDetection.TorrentListener() {
                @Override
                public void detected(ArrayList pkg)
                {
                    stopService();
                    new AlertDialog.Builder(MainActivity.this)
                        .setTitle("Sniffing App!")
                        .setMessage(String.format("%s", new Object[]{TextUtils.join(", ", (String[]) pkg.toArray(new String[pkg.size()]))}))
                        .setPositiveButton("OK", null)
                        //.setAnimation(Animation.SLIDE)
                        .setCancelable(false)
                        .create()
                        //.setIcon(R.mipmap.ic_info, Icon.Visible)
                        .show();
                }
            });
		coordinatorLayout = (CoordinatorLayout) findViewById(R.id.coordinator);
        setupToolbar(null);
		vpn_status = (TextView)findViewById(R.id.vpn_status);
        rippleBackground = (RippleBackground) findViewById(R.id.content);
	    start_vpn = (CuboidButton)findViewById(R.id.connect);
        start_vpn.setOnClickListener(new View.OnClickListener() {
                @Override
                public void onClick(View p1)
                {
                    if (InjectorService.isRunning)
                    {
						//a(false);
                        stopService();
                    }
                    else
                    {
                        if (isConnected())
                        {
                            startVPN();
                        }
                    }
                }
            });
        mServer = (Spinner) findViewById(R.id.serverSpin);
        parseServer();
        serverAdapt = new ArrayAdapter(this, android.R.layout.simple_spinner_dropdown_item, serverList);
        mServer.setAdapter(serverAdapt);
        mServer.setSelection(sp.getInt("ServerSpin", 0));
        mServer.setOnItemSelectedListener(new AdapterView.OnItemSelectedListener(){
                @Override
                public void onItemSelected(AdapterView<?> p1, View p2, int p3, long p4)
                {
                    try
                    {
                        JSONArray jarr = new JSONObject(db.getData()).getJSONArray("Servers");
                        JSONObject obj = jarr.getJSONObject(p3);
                        sp.edit().putString("SSHName", obj.getString("Name")).commit();
                        sp.edit().putString("SSHHost", obj.getString("SSHHost")).commit();
                        sp.edit().putString("SSHPort", obj.getString("SSHPort")).commit();
						sp.edit().putString("DropBear", obj.getString("DropBear")).commit();
                        sp.edit().putString("SSLPort", obj.getString("SSLPort")).commit();
                        sp.edit().putString("ProxyPort", obj.getString("ProxyPort")).commit();
                        sp.edit().putInt("ServerSpin", p3).commit();
                    }
                    catch (Exception e)
                    {
                        toast(e.getMessage());
                    }

                }

                @Override
                public void onNothingSelected(AdapterView<?> p1)
                {

                }
            });
		mTweak = (Spinner) findViewById(R.id.tweakSpin);
		parseTweak();
        tweakAdapt = new ArrayAdapter(this, android.R.layout.simple_spinner_dropdown_item, tweakList);
        mTweak.setAdapter(tweakAdapt);
        mTweak.setSelection(sp.getInt("TweakSpin", 0));
        mTweak.setOnItemSelectedListener(new AdapterView.OnItemSelectedListener(){
                @Override
                public void onItemSelected(AdapterView<?> p1, View p2, int p3, long p4)
                {
                    try
                    {
                        if (p1.getItemAtPosition(p3).toString().equals("Direct"))
                        {
                            conts.setDirectEnable(true);
                            sp.edit().putString("TweakName", "Direct").commit();
							sp.edit().putBoolean("isDirectP", false).commit();
							sp.edit().putBoolean("isSSL", false).commit();
                        }
                        else
                        {
                            conts.setDirectEnable(false);
                            JSONArray jarr = new JSONObject(db.getData()).getJSONArray("Tweaks");
                            JSONObject obj = jarr.getJSONObject(p3 - 1);
                            sp.edit().putString("TweakName", obj.getString("Name")).commit();
                            //conts.setHTTPayload(obj.getString("Payload"));
							sp.edit().putBoolean("isDirectP", obj.getBoolean("Direct")).commit();
                            sp.edit().putBoolean("isSSL", obj.getBoolean("SSL")).commit();
                            sp.edit().putString("Payload", obj.getString("Payload")).commit();
                            sp.edit().putBoolean("CustomProxy", obj.getBoolean("CustomProxy")).commit();
                            sp.edit().putString("cProxyHost", obj.getString("ProxyHost")).commit();
                            sp.edit().putString("cProxyPort", obj.getString("ProxyPort")).commit();

                        }
                        sp.edit().putInt("TweakSpin", p3).commit();
                    }
                    catch (Exception e)
                    {
                        toast(e.getMessage());
                    }

                }

                @Override
                public void onNothingSelected(AdapterView<?> p1)
                {

                }
            });
		
        NavigationView navigationView = (NavigationView) findViewById(R.id.shitstuff);
        View header=navigationView.getHeaderView(0);
        ipAddress = (TextView) header.findViewById(R.id.version);
		ipAddress.setText(Util.getIpAddress());
		
		addSwitch(navigationView, R.id.custom_tweak, "custom_tweak", false, new CompoundButton.OnCheckedChangeListener(){
				@Override
				public void onCheckedChanged(CompoundButton buttonView, boolean isChecked){
					if(isChecked){
						mTweak.setEnabled(false);
					}else{
						mTweak.setEnabled(true);
					}
					sp.edit().putBoolean("custom_tweak", isChecked).commit();
				}
			});
		addSwitch(navigationView, R.id.dns_forwarder, "dns_forwarder", true, new CompoundButton.OnCheckedChangeListener(){
				@Override
				public void onCheckedChanged(CompoundButton buttonView, boolean isChecked){
					sp.edit().putBoolean("dns_forwarder", isChecked).commit();
				}
			});
		addSwitch(navigationView, R.id.udp_forwarder, "udp_forwarder", true, new CompoundButton.OnCheckedChangeListener(){
				@Override
				public void onCheckedChanged(CompoundButton buttonView, boolean isChecked){
					sp.edit().putBoolean("udp_forwarder", isChecked).commit();
				}
			});
		addSwitch(navigationView, R.id.cpu_wakelock, "cpu_wakelock", true, new CompoundButton.OnCheckedChangeListener(){
				@Override
				public void onCheckedChanged(CompoundButton buttonView, boolean isChecked){
					sp.edit().putBoolean("cpu_wakelock", isChecked).commit();
				}
			});
		
		navigationView.setNavigationItemSelectedListener(new NavigationView.OnNavigationItemSelectedListener() {
                // This method will trigger on item Click of navigation menu
                @Override
                public boolean onNavigationItemSelected(MenuItem menuItem)
                {
                    drawerLayout.closeDrawers();
                    switch (menuItem.getItemId())
                    {
						case R.id.update:
							String urln = "https://play.google.com/store/apps/details?id=com.gn.tunnel";
							Intent in = new Intent(Intent.ACTION_VIEW);
							in.setData(Uri.parse(urln));
							startActivity(in);
							return true;

						case R.id.telegram:
							String url = "https://t.me/Cyber_yakku";
							Intent i = new Intent(Intent.ACTION_VIEW);
							i.setData(Uri.parse(url));
							startActivity(i);
							return true;

						case R.id.facebook:
							String urlf = "https://m.facebook.com/gimsara.tm";
							Intent ifs = new Intent(Intent.ACTION_VIEW);
							ifs.setData(Uri.parse(urlf));
							startActivity(ifs);
							return true;
							
						case R.id.moreapps:
							String urlt = "https://play.google.com/store/apps/developer?id=TEAMNG";
							Intent inr = new Intent(Intent.ACTION_VIEW);
							inr.setData(Uri.parse(urlt));
							startActivity(inr);
							return true;
							
						case R.id.A10:
							String urlk = "http://www.mediafire.com/file/6vrpawu15e0u0h4/app.apk/file";
							Intent inv = new Intent(Intent.ACTION_VIEW);
							inv.setData(Uri.parse(urlk));
							startActivity(inv);
							return true;
							
						case R.id.geo_location:
							new UpdateCore(MainActivity.this, "http://ip-api.com/json", new UpdateCore.Listener() {
									@Override
									public void onLoading()
									{
										snack("Loading..");
									}

									@Override
									public void onCompleted(String config) throws Exception
									{
										JSONObject geo = new JSONObject(config);
										StringBuffer sb = new StringBuffer();
										sb.append("<br>").append("ISP: ").append(geo.getString("isp"));
										sb.append("<br>").append("Time Zone: ").append(geo.getString("timezone"));
										sb.append("<br>").append("Country Code: ").append(geo.getString("countryCode"));
										sb.append("<br>").append("Country:").append(geo.getString("country"));
										sb.append("<br>").append("Region Name: ").append(geo.getString("regionName"));
										sb.append("<br>").append("City: ").append(geo.getString("city"));
										VPNLog.logInfo("GeoLoacation:" + sb.toString());
										snack("See Result In Logs ..");
									}

									@Override
									public void onCancelled()
									{

									}

									@Override
									public void onException(String ex)
									{
										snack(ex);
									}
								}).execute();
							return true;
						case R.id.custom_tweak:
							new TweakDialog(MainActivity.this, "Custom Setting").show();
							return true;
                        case R.id.dns_forwarder:
							new DNSDialog(MainActivity.this).show();
                            return true;
                        case R.id.cpu_wakelock:
                             return true;
                        
                        default:
                            //snack("Coming Soon!");
                            return true;

                    }
                }
            });
			
		
        // Initializing Drawer Layout and ActionBarToggle
        drawerLayout = (DrawerLayout) findViewById(R.id.drawerLayout);
        ActionBarDrawerToggle actionBarDrawerToggle = new ActionBarDrawerToggle(this, drawerLayout, toolbar, R.string.app_name, R.string.app_name);
        drawerLayout.setDrawerListener(actionBarDrawerToggle);
        actionBarDrawerToggle.syncState();
		v = (ImageView) findViewById(R.id.scrl);
        View persistentbottomSheet = coordinatorLayout.findViewById(R.id.bottomsheet);
        btnAcc = (Button) findViewById(R.id.btnAccount);
        final BottomSheetBehavior behavior = BottomSheetBehavior.from(persistentbottomSheet);
        behavior.setBottomSheetCallback(new BottomSheetBehavior.BottomSheetCallback() {
                @Override
                public void onStateChanged(@NonNull View bottomSheet, int newState)
                {
                    switch (newState)
                    {
                        case BottomSheetBehavior.STATE_HIDDEN:
                            break;
                        case BottomSheetBehavior.STATE_EXPANDED: 
                            btnAcc.setText("Clear Log");
							v.setImageResource(R.drawable.scrool_down);
                            //vpn_status.setText("Cleard..");
                            //btnBottomSheet.setText(R.string.close);
                            break;
                        case BottomSheetBehavior.STATE_COLLAPSED: 
                            btnAcc.setText("Go Out");
							v.setImageResource(R.drawable.scrool_up);
                            //vpn_status.setText("");
                            //btnBottomSheet.setText(R.string.expand);
                            break;
                        case BottomSheetBehavior.STATE_DRAGGING:
                            break;
                        case BottomSheetBehavior.STATE_SETTLING:
                            behavior.setHideable(false);
                            break;
                    }
                }

                @Override
                public void onSlide(@NonNull View bottomSheet, float slideOffset)
                {

                }
            });
        ((RelativeLayout) findViewById(R.id.bottom_sheet_header)).setOnClickListener(new View.OnClickListener() {
                @Override
                public void onClick(View view)
                {
                    if (behavior.getState() != BottomSheetBehavior.STATE_EXPANDED)
                    {
                        behavior.setState(BottomSheetBehavior.STATE_EXPANDED);
                        //btnBottomSheet.setText(R.string.close);
                    }
                    else
                    {
                        behavior.setState(BottomSheetBehavior.STATE_COLLAPSED);
                        //btnBottomSheet.setText(R.string.expand);
                    }
                }
            });
        btnAcc.setOnClickListener(new View.OnClickListener() {
                @Override
                public void onClick(View p1)
                {
                    if (behavior.getState() == BottomSheetBehavior.STATE_COLLAPSED)
                    {
						AlertDialog.Builder builder3 = new AlertDialog.Builder(MainActivity.this);
						builder3.setMessage("Do you want to minimize or exit?");
						builder3.setPositiveButton("Go Out", new DialogInterface.OnClickListener() {
								@Override
								public void onClick(DialogInterface p1, int p2)
								{
									// TODO: Implement this method
									if (android.os.Build.VERSION.SDK_INT >= 21) {
										finishAndRemoveTask();
									} else {
										android.os.Process.killProcess(android.os.Process.myPid());
									}
									System.exit(0);
								}
							});
						builder3.setNegativeButton("MINIMIZE", new DialogInterface.OnClickListener() {
								@Override
								public void onClick(DialogInterface p1, int p2)
								{
									// TODO: Implement this method
									Intent intent = new Intent("android.intent.action.MAIN");
									intent.addCategory("android.intent.category.HOME");
									intent.setFlags(268435456);
									startActivity(intent);
								}
							});
						builder3.setNeutralButton("CANCEL", null);
						builder3.show();
					}
						else if (behavior.getState() == BottomSheetBehavior.STATE_EXPANDED)
						{
							LogFragment.clear();
							snack("Cleared !");
						
						}
                    }
                
            });
		
		adhelper = new AdmobHelper(this);
		adhelper.setMobileAdsId("ca-app-pub-9857422899062299~2737781778");
		adhelper.setBannerId("ca-app-pub-9857422899062299/6078260987");
		adhelper.setBannerSize(AdSize.SMART_BANNER);
		adhelper.setBannerView((RelativeLayout) findViewById(R.id.adView));
		adhelper.setIntertitialId("ca-app-pub-9857422899062299/4980801730");
		adhelper.setShowInterAdsAuto(true);
		adhelper.setRewardedId("ca-app-pub-9857422899062299/7415393387");
		adhelper.setRewardAdsListener(new AdmobHelper.RewardedListener() {
                @Override
                public void onLoad()
                {

                }

                @Override
                public void onLoaded()
                {

                    adhelper.showRewardedAds();
                }

                @Override
                public void onReward(RewardItem rewarditem)
                {
                    Toast.makeText(MainActivity.this, "Thank you for continues support!", 0).show();
                    //makePro();
                }

                @Override
                public void onFaild()
                {
                    //adprogress.dismiss();
                    //snack("Fail Rewarded Ads. Please try again!");
                }
            });
		//adhelper.setAdsListener(al);
		adhelper.buildAdsRequest();
		adhelper.loadBannerAdsRequest();
		
	}
	
	public void addSwitch(NavigationView navView, int id, final String tag, boolean defval, CompoundButton.OnCheckedChangeListener listener){
		MenuItem bleh = navView.getMenu().findItem(id);
		bleh.setActionView(new Switch(this));
		Switch dnsSwitch =(Switch) bleh.getActionView();
		dnsSwitch.setChecked(sp.getBoolean(tag, defval));
		dnsSwitch.setOnCheckedChangeListener(listener);
	}

    @Override
    public boolean onCreateOptionsMenu(Menu menu)
    {
        getMenuInflater().inflate(R.menu.home_menu, menu);
        // TODO: Implement this method
        return true;
    }

    @Override
    public boolean onOptionsItemSelected(MenuItem item)
    {
        switch (item.getItemId())
        {
            case R.id.menu_about:
				
                startActivity(new Intent(MainActivity.this, AboutActivity.class));
                break;
        }
        // TODO: Implement this method
        return super.onOptionsItemSelected(item);
	}

    @SuppressWarnings("ConstantConditions")
    private void setupToolbar(String title)
    {
        toolbar = (CenteredToolBar) findViewById(R.id.toolbar);
        setSupportActionBar(toolbar);
        if (title != null)
        {
            getSupportActionBar().setTitle(title);
        }
        else
        {
            ActivityInfo activityInfo;
            try
            {
                activityInfo = getPackageManager().getActivityInfo(getComponentName(), PackageManager.GET_META_DATA);
                String currentTitle = activityInfo.loadLabel(getPackageManager()).toString();
                getSupportActionBar().setTitle(currentTitle);

            }
            catch (PackageManager.NameNotFoundException ignored)
            {

            }

        }
        //getSupportActionBar().setHomeAsUpIndicator(R.drawable.ic_burger);
        getSupportActionBar().setDisplayHomeAsUpEnabled(true);
        getSupportActionBar().setDisplayShowHomeEnabled(true);

    }

	protected boolean isConnected()
	{
		boolean enabled = true;

		ConnectivityManager connectivityManager = (ConnectivityManager) this.getSystemService(Context.CONNECTIVITY_SERVICE);
		NetworkInfo info = connectivityManager.getActiveNetworkInfo();

		if ((info == null || !info.isConnected() || !info.isAvailable()))
        {
			enabled = false;
			Toast.makeText(this, "No Internet connection", -1).show();
		}
		return enabled;	
	}




	private boolean isEmpty(String str)
	{
		if (str.isEmpty())
        {
			return true;
		}
		return false;
	}

	private void startVPN()
	{
		conts.setUsername("Gimsara");
        conts.setPassword("gimgim");
        conts.setSSHHost(sp.getString("SSHHost", ""));
        conts.setSSHPort(sp.getString("SSHPort", ""));
		conts.setSSHDropbear(sp.getString("DropBear", ""));
        conts.setSSLPort(sp.getString("SSLPort", ""));
        conts.setHTTPayload(sp.getString("Payload", ""));
		conts.setDirectPEnable(sp.getBoolean("isDirectP", true));
        conts.setSSLEnable(sp.getBoolean("isSSL", true ));
        if (!sp.getBoolean("CustomProxy", true))
        {
            conts.setProxy(sp.getString("SSHHost", ""));
            conts.setProxyPort(sp.getString("ProxyPort", ""));
        }
        else
        {
            conts.setProxy(sp.getString("cProxyHost", ""));
            conts.setProxyPort(sp.getString("cProxyPort", ""));
        }
        conts.setUsername("Gimsara");
        conts.setPassword("gimgim");
        conts.setLocalPort("8989");
        if (isEmpty(conts.getUsername()))
        {
            snack("Please enter your username and password!");
        }
        else if (isEmpty(conts.getPassword()))
        {
            snack("Please enter your username and password!");
        }
        else
        {
            Intent intent = VpnService.prepare(this);
            if (intent != null)
            {
                startActivityForResult(intent, REQUEST_CODE);
            }
            else
            {
                onActivityResult(REQUEST_CODE, RESULT_OK, intent);
            }
        }
	}

	private void hatdog(boolean z) {
        if (z) {
           // a(false);
            Intent intent = new Intent(this, InjectorService.class);
            intent.setAction(InjectorService.ACTION_START);
            if (Build.VERSION.SDK_INT >= 26) {
                //startForegroundService(intent);
                return;
            } else {
                startService(intent);
                return;
            }
        }
        if (SSHTunnelService.isServiceStarted()) {
            IProtect.b();
        }
        if (InjectorService.isServiceStarted()) {
            stopService(new Intent(this, InjectorService.class));
        }
    }
	
	@Override
	protected void onActivityResult(int requestCode, int resultCode, Intent data)
	{
		switch (requestCode)
        {
			case REQUEST_CODE:
               // LogFragment.clear();
				//a(true);
				Intent intent = new Intent(this, InjectorService.class);
				intent.setAction(InjectorService.ACTION_START);
				/*if (Build.VERSION.SDK_INT >= 26) {
					startForegroundService(intent);
				} else {*/
					startService(intent);
				//}
				//startService(new Intent(this, InjectorService.class).setAction(InjectorService.ACTION_START));
                break;
		}
		// TODO: Implement this method
		super.onActivityResult(requestCode, resultCode, data);
	}

	@Override
	protected void onInjectorConnected()
	{
		if (isActive())
        {
			//start_vpn.setCircle_border_color(Color.parseColor(""));
            start_vpn.setCr_icon(R.drawable.ic_close_white_24dp);
            enabledWidget(false);

		}
        else
        {

            start_vpn.setCr_icon(R.drawable.ic_paper_plane);
            enabledWidget(true);
		}
		super.onInjectorConnected();
	}



	@Override
	public void updateState(int state)
	{
	    vpn_status.setText(state);
        //toast(getString(state));
		switch (state)
        {
			case R.string.state_connecting:
                break;
			case R.string.state_reconnecting:
                break;
			case R.string.state_auth:
                break;
			case R.string.state_connected:
				enabledWidget(false);
                break;
			case R.string.state_disconnected:
				enabledWidget(true);
                break;
		}
		onInjectorConnected();
		// TODO: Implement this method
		super.updateState(state);
	}

    private void snack(String msg)
    {
        Snackbar.make(coordinatorLayout, msg, Snackbar.LENGTH_SHORT).show();
    }

	private void toast(String msg)
	{
		Toast.makeText(this, msg, Toast.LENGTH_LONG).show();
	}

	private void enabledWidget(boolean z)
	{
        mServer.setEnabled(z);
		if(sp.getBoolean("custom_tweak", true)){
			mTweak.setEnabled(true);
		}else{
			mTweak.setEnabled(z);
		}
		//mTweak.setEnabled(z);
	}

    @Override
    protected void onResume()
    {
        super.onResume();
		ipAddress.setText(Util.getIpAddress());
		adhelper.loadBannerAdsRequest();
		SSHTunnelService.a(this);
        if (SSHTunnelService.connected)
		{
			vpn_status.setText("Connected");
            rippleBackground.stopRippleAnimation();
            rippleBackground.setRippleColor(Color.parseColor(getString(R.color.colorConnected)));
            rippleBackground.startRippleAnimation();
        }
		else
		{
			vpn_status.setText("Disconnected");
            rippleBackground.stopRippleAnimation();
            rippleBackground.setRippleColor(Color.parseColor(getString(R.color.colorDisconnected)));
            rippleBackground.startRippleAnimation();
        }
		
        update();
    }

	@Override
	protected void onDestroy()
	{
		doUnbind();
		super.onDestroy();
	}

	void parseServer()
    {
        try
        {
            JSONArray jarr = new JSONObject(db.getData()).getJSONArray("Servers");
            for (int i = 0; i < jarr.length(); i++)
            {
                JSONObject obj = jarr.getJSONObject(i);
                serverList.add(obj.getString("Name"));
            }
        }
        catch (JSONException e)
        {}
    }

    void parseTweak()
    {
        try
        {
            JSONArray jarr = new JSONObject(db.getData()).getJSONArray("Tweaks");
            tweakList.add("Direct");
            for (int i = 0; i < jarr.length(); i++)
            {
                JSONObject obj = jarr.getJSONObject(i);
                tweakList.add(obj.getString("Name"));
            }

        }
        catch (JSONException e)
        {}
    }

    void refresh()
    {
        serverList.clear();
        parseServer();
        serverAdapt.notifyDataSetChanged();
        tweakList.clear();
        parseTweak();
        tweakAdapt.notifyDataSetChanged();
    }

    void update()
    {
        new UpdateCore(this, Constraints.updater, new UpdateCore.Listener() {
                @Override
                public void onLoading()
                {

                }

                @Override
                public void onCompleted(final String config)
                {
                    try
                    {
                        final JSONObject obj = new JSONObject(MilitaryGradeEncrypt.decryptBase64StringToString(config, Constraints.confpass));
                        if (Double.valueOf(obj.getString("Version")) <= Double.valueOf(conts.getConfigVersion()))
                        {
                            
                        }
                        else
                        {
                            new AlertDialog.Builder(MainActivity.this)
                                .setTitle("NEW UPDATE!")
                                .setMessage("New updates and announcements!\n \n  What s new? \n" + obj.getString("Message"))
                                .setPositiveButton("OK", new DialogInterface.OnClickListener() {
                                    @Override
                                    public void onClick(DialogInterface p1, int p2)
                                    {

                                        try
                                        {
                                            db.updateData("1", config);
                                            sp.edit().putString("CurrentConfigVersion", obj.getString("Version")).commit();
                                            refresh();
                                        }
                                        catch (JSONException e)
                                        {}

                                    }
                                })
                                .setNegativeButton("CANCEL", null)
                                .create()
                                .show();
                        }
                    }
                    catch (Exception e)
                    {
                        // Toast.makeText(MainActivity.this, e.getMessage() , 0).show();
                    }
                }

                @Override
                public void onCancelled()
                {

                }

                @Override
                public void onException(String ex)
                {

                }
            }).execute();

	}
}
